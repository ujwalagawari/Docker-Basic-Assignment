Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
	a)-  docker pull jenkins // docker pull <image-name>

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
	a)- docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
	a)- docker images --no-trunc

5. Create a container of your image 
	a)- 

6. List all the running containers
	a)- docker ps --all

7. List all the running and stopped containers
	a)-  docker ps

8. Find out the "Full" containerId of the container and write it below.
	a)-  docker ps -f name=venkat-container --no-trunc

9. Find out how many image layers are used to build this image.
	a)-  docker image inspect -f "{{.RootFS.Layers}}" hello-world

10. Get the Apache Tomcat 7 server image from the docker hub.
	a)- docker search tomcat7
	     docker pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
	a)- docker run --name ujwala-container tomcat:7

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
	a)- docker container inspect ujwala-container -->get all details
	    docker container inspect ujwala-container |grep "IPAddress"
		"SecondaryIPAddresses": null,
            	"IPAddress": "172.17.0.50",

		To start container --> docker start ujwala-container

13. Which Port it is using?
	a)- docker container inspect -f "{{.NetworkSettings.Ports}}" ujwala-container -->map[8080/tcp:[]]

14. Try to access the Tomcat's home page from your machine/vm.
	a)- 

15. What is the disk size of Apache Tomcat image?
	a)- docker image inspect tomcat:7 -f "{{.Size}}"

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
	a)- docker image inspect tomcat:7 -f "{{.ContainerConfig.Env}}"  --> For container
	    docker image inspect tomcat:7 -f "{{.Config.Env}}"  --> For Image

17. Find out which port is exposed for tomcat?
	a)- docker image inspect tomcat:7 -f "{{.ContainerConfig.ExposedPorts}}"  --> For container -->map[8080/tcp:{}]
	    docker image inspect tomcat:7 -f "{{.Config.ExposedPorts}}"  --> For Image -->map[8080/tcp:{}]

18. Run multiple conntainers of tomcat on different port and access it's home page.
	a)- docker run -d -p 4044:4045 tomcat:7 ujwala-container -->to change port of image in container 
	    docker run -d -p 4044:4045 tomcat:7 -->to change port of image 

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
	a)- docker pull ubuntu

20. Run the container of ubuntu in attached mode.
	a)- 

21. Run the container of another ubuntu in detached mode.
	a)- 

22. Check how many ubuntu containers are running and stopped
	a)-  docker ps -a -f ancestor=tomcat:7

23. Is the tomcat container running? If no, start one.
	a)- docker start tomcat:7

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
	a)- docker logs tomcat-container

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
	a)- 

26. Login as root user in ubuntu container
	a)- docker run -t -i ubuntu /bin/bash

27. Create a file with any name in root directory
	a)- touch docker.txt
	ls --> to check folders
	

28. Install software of your choice in ubuntu container using "apt-get install"
	a)- apt-get update
	    apt-get install -y curl

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
	a)- 

30. Check if the ubuntu container is running.
	a)- 

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
	a)- 

32. Login as a root user
	a)- 

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
	a)- 

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
	a)- 

35. Create an Image out of the existing container.
	a)- 

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
	a)- 

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
	a)- 

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a ubuntu container, login into the ubuntu, install nginx, access nginx's home page from the container,
Now, come out of the ubuntu container and replace the existing index.html page of nginx with above index.html page that you created, Now access the nginx server from host machine, it should display the index.html that you have created.
	a)- 

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q
write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s
write atleast 1 command using each option above and prove their concepts as described in the --help.
	a)- 


41. Type below command:-
	docker --help
you will various sections of commands apart from options like "Managemnet Commands" and "Commands".
Write some texts below describing the use of "Management Commands".
Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top
	a)- 


42. Kill all running container in one liner command.
	a)- 

43. Delete all images in one liner command.
	a)- 

44. Create a simple Dockerfile, build it and run it.
	a)- 

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
1. USER
2. RUN
3. ENV
4. CMD
5. RUN
6. ENTRYPOINT
7. EXPOSE
8. VOLUME
	a)- 
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
	a)- 

